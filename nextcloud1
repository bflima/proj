#!/bin/bash

function inicial()
{
  FILE="/tmp/inicial.txt"
  echo "$FILE"

  if [ ! -e "$FILE" ] ; then
    yum update -y && yum upgrade -y

    systemctl stop firewalld
    systemctl disable firewalld

    which vim || yum install vim -y
    which ntpdate || yum install ntpdate -y && ntpdate a.ntp.br

    sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config && cat /etc/selinux/config
    echo "Configuracao realizada" > $FILE
    reboot
  fi
}


function config_vim()
{
    which vim || yum vim -y
    sleep 2
    FILE="/tmp/vim.txt"
    LOCAL_VIM=$(whereis vimrc |cut -d " " -f2) 
    echo "$FILE"

    if [ ! -e "$FILE" ] ; then
        echo "Criando arquivo de configuracao"
        sed -i 's/set\ nocompatible/set\ bg\=\dark\nset\ nocompatible/'     $LOCAL_VIM
        sed -i 's/set\ nocompatible/set\ tabstop\=4\nset\ nocompatible/'    $LOCAL_VIM
        sed -i 's/set\ nocompatible/set\ shiftwidth\=4\nset\ nocompatible/' $LOCAL_VIM
        sed -i 's/set\ nocompatible/set\ expandtab\nset\ nocompatible/'     $LOCAL_VIM
        sed -i 's/set\ nocompatible/syntax\ on\nset\ nocompatible/'         $LOCAL_VIM
        sed -i 's/set\ nocompatible/set\ number\nset\ nocompatible/'        $LOCAL_VIM
        echo "Configuracao realizada" > $FILE
    fi

    head -n 20 /etc/vimrc
    echo $LOCAL_VIM

}

function inst_dep()
{ 
  FILE="/tmp/instalacao.txt"
  echo "$FILE"

  if [ ! -e "$FILE" ] ; then
     yum install epel-release.noarch -y
     yum install epel-release yum-utils -y
    rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm -y
    yum install wget httpd php php-dom php-mbstring php-gd php-pdo php-json php-xml php-zip php-curl php-mcrypt php-pear setroubleshoot-server bzip2 -y
    sleep 2
    yum install php-ldap php php-gd php-pear php-snmp php-pecl-zendopcache php-mbstring php-mysqli php-mysql httpd httpd-devel gcc php-mcrypt php-curl php-imap php-xmlrpc php-apcu php-pecl-zendopcache vim curl -y
    #Alterar versao
    yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm -y
    #Habilitar php 7
    yum-config-manager --enable remi-php70 -y
    #Atualizar pacotes
    yum update -y
    #instalar CAS
yum install php-pear-CAS.noarch php-pecl-zip -y
    echo "Configuracao realizada" > $FILE
  fi
}

function inst_db()
{
  FILE="/tmp/inst_db.txt"
  echo "$FILE"
  if [ ! -e "$FILE" ] ; then
    yum install mariadb-server php70w-mysql -y
    systemctl start mariadb
    systemctl enable mariadb
    echo "Configuracao realizada" > $FILE
  fi
}

#Desabilitar secure pass
function desabilitar_sec_pass()
{
    FILE="/tmp/sec_pass.txt"
    if [ ! -e "$FILE" ] ; then
        which expect || yum expect -y
        NEW_PASS="admin@123"
        expect <<FIM
        set timeout 10
        spawn mysql_secure_installation
        expect "Enter current password for root (enter for none):"
        send "\r"
        expect "Set root password?"
        send "y\r"
        expect "New password:"
        send "$NEW_PASS\r"
        expect "Re-enter new password:"
        send "$NEW_PASS\r"
        expect "Remove anonymous users?"
        send "y\r"
        expect "Disallow root login remotely?"
        send "y\r"
        expect "Remove test database and access to it?"
        send "y\r"
        expect "Reload privilege tables now?"
        send "y\r"
        ")
FIM
        echo "Configuracao realizada" > $FILE
else
        echo "Configuracao realizada, para repetir a instalacao remover esse arquivo $FILE"
fi
}

#Função para desabilitar complexidade de senha no mysql
function complex_senha()
{
  FILE="/tmp/complex_mysql.txt"
  clear
  if [ ! -e "$FILE" ] ; then
    which expect || yum expect -y    

    MYSQL=$(grep 'temporary password' /var/log/mysqld.log | awk '{print $11}')
    TMP_PASS="Senha.123"
    NEW_PASS="admin@123"

    expect <<EOF
    log_user 0
    spawn mysql -u root -p
    expect "Enter password:"
    send "$MYSQL\r"
    expect "mysql>"
    send "ALTER USER 'root'@'localhost' IDENTIFIED BY '$TMP_PASS';\r"
    expect "mysql>"
    send "uninstall plugin validate_password;\r"
    expect "mysql>"
    send "ALTER USER 'root'@'localhost' IDENTIFIED BY '$NEW_PASS';\r"
    expect "mysql>"
    send "exit\r"
    log_user 1
    expect eof
EOF
    echo "Configuracao realizada" > $FILE
    sleep 2
    systemctl restart mysqld
    systemctl status mysqld
else
    echo "Configuracao realizada, para repetir a instalacao remover esse arquivo $FILE"
fi
}

function criar_banco()
{
#Here document para criar banco
  FILE="/tmp/temp_banco.txt"
  if [ ! -e "$FILE" ] ; then
    BANCO="/tmp/banco.sql"
    DB="nextcloud_db"
    USER="nextcloud_user"
    PASS="admin@123"

    cat > $BANCO << EOF
    CREATE DATABASE $DB;
    CREATE USER $USER@localhost;
    SET PASSWORD for $USER@localhost = PASSWORD("$PASS");
    GRANT ALL PRIVILEGES ON $DB. * TO $USER@localhost IDENTIFIED BY "$PASS";
    FLUSH PRIVILEGES;
    exit
EOF
    mysql -u root -p < $BANCO
    #rm -rf $BANCO
    echo "Configuracao realizada" > $FILE
  else
    echo "Configuracao realizada, para repetir a instalacao remover esse arquivo $FILE"
  fi
}

function nextcloud()
{
  FILE="/tmp/conf_nextcloud.txt"

  if [ ! -e "$FILE" ] ; then
    cd /var/www/html
    wget https://download.nextcloud.com/server/releases/nextcloud-15.0.4.tar.bz2
    tar -xvjf nextcloud*
    mkdir nextcloud/data
    chown -R apache:apache /var/www/html/nextcloud -R

    cat > /etc/httpd/conf.d/nextcloud.conf << EOF
Alias /nextcloud "/var/www/html/nextcloud/"

<Directory /var/www/html/nextcloud/>
  Options +FollowSymlinks
  AllowOverride All
<IfModule mod_dav.c>
  Dav off
</IfModule>
  SetEnv HOME /var/www/html/nextcloud
  SetEnv HTTP_HOME /var/www/html/nextcloud
</Directory>
EOF
    echo "Configuracao realizada" > $FILE
  else
    echo "Configuracao realizada, para repetir a instalacao remover esse arquivo $FILE"
  fi
  systemctl start httpd
  systemctl enable httpd
}

inicial
config_vim
inst_dep
inst_db
desabilitar_sec_pass
#complex_senha
criar_banco
nextcloud

